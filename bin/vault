#!/bin/bash
# Vault Script - Manages 1Password secrets across stages
#
# Usage:
#   Direct:     ./bin/vault --stage development -- python app.py
#               ./bin/vault -- npm start  # uses DEFAULT_STAGE
#
#   Sourced:    source bin/vault
#               run_with_vault --stage development -- python app.py
#
# Config:
#   .env.project: PROJECT_NAME, DEFAULT_STAGE
#   .env.vault:   1Password refs (op://vault/item/field)

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

# Source the project config file
if [ -f "$PROJECT_ROOT/.env.project" ]; then
    source "$PROJECT_ROOT/.env.project"
else
    echo "Error: .env.project not found. Please create it with PROJECT_NAME and DEFAULT_STAGE."
    exit 1
fi



# Check if .env.vault exists
if [ ! -f "$PROJECT_ROOT/.env.vault" ]; then
    echo "Error: .env.vault not found. Please create it with your OP vault items."
    exit 1
fi

# Function to run commands with vault
run_with_vault() {
    local STAGE_ARG=""
    local RUN_ARGS=()
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --stage)
                STAGE_ARG=$2
                shift 2
                ;;
            --)
                shift
                RUN_ARGS=("$@")
                break
                ;;
            *)
                RUN_ARGS=("$@")
                break
                ;;
        esac
    done
    
    # Set stage
    local CURRENT_STAGE=${STAGE_ARG:-$DEFAULT_STAGE}
    
    # Validate command
    if [ ${#RUN_ARGS[@]} -eq 0 ]; then
        echo "Error: No command specified to run"
        return 1
    fi
    
    echo "Running with vault..."
    echo "Project: $PROJECT_NAME"
    echo "Stage: $CURRENT_STAGE"
    echo "Vault: $PROJECT_ROOT/.env.vault"
    
    # Export environment variables and run
    export STAGE=$CURRENT_STAGE
    export PROJECT_NAME=$PROJECT_NAME
    op run --env-file="$PROJECT_ROOT/.env.vault" --no-masking -- "${RUN_ARGS[@]}"
}

# Check if script is being sourced or executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Script is being executed directly - just call the function
    run_with_vault "$@"
else
    # Script is being sourced - just define the function
    echo "Vault functions loaded. Use 'run_with_vault --stage <stage> -- <command>' to run commands with vault secrets."
fi