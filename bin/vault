#!/bin/bash
# Vault Script - Manages 1Password secrets across stages
#
# Usage:
#   Direct:     ./bin/vault --stage development -- python app.py
#               ./bin/vault -- npm start  # uses DEFAULT_STAGE
#
#   Sourced:    source bin/vault
#               run_with_vault --stage development -- python app.py
#
# Config:
#   .env.project: PROJECT_NAME, DEFAULT_STAGE
#   .env.vault:   1Password refs (op://vault/item/field)

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

# Source the project config file
if [ -f "$PROJECT_ROOT/.env.project" ]; then
    source "$PROJECT_ROOT/.env.project"
else
    echo "Error: .env.project not found. Please create it with PROJECT_NAME and DEFAULT_STAGE."
    exit 1
fi



# Check if .env.vault exists
if [ ! -f "$PROJECT_ROOT/.env.vault" ]; then
    echo "Error: .env.vault not found. Please create it with your OP vault items."
    exit 1
fi

# Function to run commands with vault
run_with_vault() {
    local STAGE_ARG=""
    local RUN_ARGS=()
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --stage)
                STAGE_ARG=$2
                shift 2
                ;;
            --)
                shift
                RUN_ARGS=("$@")
                break
                ;;
            *)
                RUN_ARGS=("$@")
                break
                ;;
        esac
    done
    
    # Set stage
    local CURRENT_STAGE=${STAGE_ARG:-$DEFAULT_STAGE}
    
    # Validate command
    if [ ${#RUN_ARGS[@]} -eq 0 ]; then
        echo "Error: No command specified to run"
        return 1
    fi
    
    echo "Running with vault..."
    echo "Project: $PROJECT_NAME"
    echo "Stage: $CURRENT_STAGE"
    echo "Vault: $PROJECT_ROOT/.env.vault"
    
    # Export environment variables and run
    export STAGE=$CURRENT_STAGE
    export PROJECT_NAME=$PROJECT_NAME
    op run --env-file="$PROJECT_ROOT/.env.vault" --no-masking -- "${RUN_ARGS[@]}"
}

# Function to read a single vault value
read_vault_value() {
    local KEY="$1"
    local STAGE_ARG=""

    # Parse stage if provided
    if [[ "$1" == "--stage" ]]; then
        STAGE_ARG="$2"
        KEY="$3"
    fi

    # Set stage
    local CURRENT_STAGE=${STAGE_ARG:-$DEFAULT_STAGE}

    if [ -z "$KEY" ]; then
        echo "Error: Please specify a key to read from vault" >&2
        echo "Usage: $0 read [--stage <stage>] <KEY>" >&2
        echo "Available keys in .env.vault:" >&2
        grep "^[A-Z_]*=" "$PROJECT_ROOT/.env.vault" | cut -d'=' -f1 | sed 's/^/  - /' >&2
        return 1
    fi

    # Export stage and project name for variable substitution
    export STAGE=$CURRENT_STAGE
    export PROJECT_NAME=$PROJECT_NAME
    export VAULT_SLUG="${PROJECT_NAME}-${STAGE}"

    # Look for the key in .env.vault
    local VALUE=$(grep "^${KEY}=" "$PROJECT_ROOT/.env.vault" | cut -d'=' -f2-)

    if [ -z "$VALUE" ]; then
        echo "Error: Key '$KEY' not found in .env.vault" >&2
        return 1
    fi

    # Substitute variables in the value
    VALUE=$(eval echo "$VALUE")

    # If it's a 1Password reference, resolve it
    if [[ "$VALUE" == op://* ]]; then
        op read "$VALUE" 2>/dev/null || {
            echo "Error: Failed to read '$VALUE' from 1Password" >&2
            return 1
        }
    else
        # Return the value as-is
        echo "$VALUE"
    fi
}

# Check if script is being sourced or executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Script is being executed directly
    CMD="${1:-help}"

    case "$CMD" in
        read)
            shift
            read_vault_value "$@"
            ;;
        help|--help)
            echo "Vault Script - Manages 1Password secrets across stages"
            echo ""
            echo "Usage:"
            echo "  $0 read [--stage <stage>] <KEY>   - Read a specific value from vault"
            echo "  $0 [--stage <stage>] -- <command> - Run command with vault secrets"
            echo ""
            echo "Examples:"
            echo "  $0 read HASHICORP_API_TOKEN"
            echo "  $0 read --stage production GOOGLE_O_AUTH_CLIENT_ID"
            echo "  $0 --stage development -- python app.py"
            echo ""
            echo "Config:"
            echo "  .env.project: PROJECT_NAME, DEFAULT_STAGE, CLOUD_VAULT"
            echo "  .env.vault:   1Password refs (op://vault/item/field)"
            ;;
        *)
            # Default to run_with_vault for backward compatibility
            run_with_vault "$@"
            ;;
    esac
else
    # Script is being sourced - just define the functions
    echo "Vault functions loaded. Use 'run_with_vault --stage <stage> -- <command>' to run commands with vault secrets."
    export -f run_with_vault
    export -f read_vault_value
fi