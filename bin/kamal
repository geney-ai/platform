#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(dirname "$SCRIPT_DIR")"


# Function to show usage
usage() {
  echo "Run Kamal commands with Terraform-sourced credentials"
  echo ""
  echo "Usage: $0 <stage> <service> <kamal-command> [args]"
  echo ""
  echo "Stage: production"
  echo "Services: py, ts-api, ts-web, static"
  echo ""
  echo "Examples:"
  echo "  $0 production ts-web deploy"
  echo "  $0 production ts-web logs"
  echo "  $0 production ts-web rollback"
  exit 1
}

# Check arguments
if [[ $# -lt 3 ]]; then
  usage
fi

STAGE="$1"
SERVICE="$2"
shift 2

# Validate stage
case "$STAGE" in
  production)
    ;;
  *)
    echo "Error: Unknown stage: $STAGE"
    echo "Available stages: production"
    exit 1
    ;;
esac

# Validate service
case "$SERVICE" in
  py|ts-web|static)
    ;;
  *)
    echo "Error: Unknown service: $SERVICE"
    echo "Available services: py, ts-web, static"
    exit 1
    ;;
esac

CONFIG_FILE="$REPO_ROOT/config/deploy/${SERVICE}.yml"

# Check if config exists
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "Error: Config file not found: $CONFIG_FILE"
  exit 1
fi

# Get infrastructure outputs from Terraform
DROPLET_IP=$(cd "$REPO_ROOT" && ./bin/tf "$STAGE" output -raw digitalocean_droplet_ip)
SSH_PRIVATE_KEY=$(cd "$REPO_ROOT" && ./bin/tf "$STAGE" output digitalocean_ssh_private_key | sed -n '3,13p')

# Get Docker registry credentials from container-registry environment  
REGISTRY_ENDPOINT=""
REGISTRY_NAME=""
DOCKERHUB_USERNAME=""
if [[ -d "$REPO_ROOT/iac/envs/container-registry" ]]; then
  REGISTRY_INFO=$(cd "$REPO_ROOT" && ./bin/tf container-registry output -json registry 2>/dev/null || echo '{}')
  REGISTRY_ENDPOINT=$(echo "$REGISTRY_INFO" | jq -r '.endpoint' 2>/dev/null || echo '')
  REGISTRY_NAME=$(echo "$REGISTRY_INFO" | jq -r '.name' 2>/dev/null || echo '')
  DOCKER_CREDS=$(cd "$REPO_ROOT" && ./bin/tf container-registry output -raw registry_credentials 2>/dev/null || echo '')
  
  if [[ -n "$DOCKER_CREDS" ]]; then
    # Decode the base64 auth to get username and password
    AUTH_STRING=$(echo "$DOCKER_CREDS" | jq -r '.auths."registry.digitalocean.com".auth' 2>/dev/null || echo "")
    if [[ -n "$AUTH_STRING" ]]; then
      DECODED_AUTH=$(echo "$AUTH_STRING" | base64 -d)
      DOCKERHUB_USERNAME=$(echo "$DECODED_AUTH" | cut -d: -f1)
      DOCKERHUB_TOKEN=$(echo "$DECODED_AUTH" | cut -d: -f2)
    fi
  fi
fi

# TODO: make this more generic
# If the service is py, export the Google client ID and secret
#  Source them from hashicorp vault using the generic-py-production vault app
if [[ "$SERVICE" == "py" ]]; then
  export VAULT_APP="generic-py-$STAGE"
  source "$REPO_ROOT/bin/vault"
  export PY_GOOGLE_CLIENT_ID=$(read_from_vault GOOGLE_CLIENT_ID)
  export PY_GOOGLE_CLIENT_SECRET=$(read_from_vault GOOGLE_CLIENT_SECRET)
fi

# Export for kamal config
export DROPLET_IP
export REGISTRY_ENDPOINT
export REGISTRY_NAME
export DOCKERHUB_USERNAME
export DOCKERHUB_TOKEN
export SSH_PRIVATE_KEY

# Run kamal 
cd "$REPO_ROOT" && kamal "$@" -c "$CONFIG_FILE"